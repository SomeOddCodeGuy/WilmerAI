# /Middleware/workflows/handlers/impl/tool_node_handler.py
import logging
import traceback
from copy import deepcopy
from typing import Any

from Middleware.workflows.handlers.base.base_workflow_node_handler import BaseHandler
from Middleware.workflows.models.execution_context import ExecutionContext
from Middleware.workflows.tools.dynamic_module_loader import run_dynamic_module
from Middleware.workflows.tools.offline_wikipedia_api_tool import OfflineWikiApiClient
from Middleware.workflows.tools.slow_but_quality_rag_tool import SlowButQualityRAGTool

logger = logging.getLogger(__name__)


class ToolNodeHandler(BaseHandler):
    """
    Handles the execution of nodes that call external tools or scripts.

    This handler acts as a router for various tool-based node types,
    dispatching tasks such as running a dynamic Python module, querying a
    local Wikipedia database, or performing RAG and keyword searches.
    """

    def __init__(self, **kwargs):
        """
        Initializes the ToolNodeHandler and its required service clients.

        Args:
            **kwargs: Keyword arguments for the base class constructor.
        """
        super().__init__(**kwargs)
        self.slow_but_quality_rag_service = SlowButQualityRAGTool()
        self.offline_wiki_api_client = OfflineWikiApiClient()

    def handle(self, context: ExecutionContext) -> Any:
        """
        Routes the request to the correct tool-handling method based on node type.

        Args:
            context (ExecutionContext): A unified context object holding all state for the node's execution.

        Returns:
            Any: The output generated by the executed tool.

        Raises:
            ValueError: If the node's 'type' is not a recognized tool.
        """
        node_type = context.config.get("type")
        logger.debug(f"Handling tool node of type: {node_type}")

        if node_type == "PythonModule":
            return self._handle_python_module(context)
        if node_type in ["OfflineWikiApiFullArticle", "OfflineWikiApiBestFullArticle", "OfflineWikiApiTopNFullArticles",
                         "OfflineWikiApiPartialArticle"]:
            return self._handle_offline_wiki_node(context)
        if node_type in ["ConversationalKeywordSearchPerformerTool", "MemoryKeywordSearchPerformerTool"]:
            return self._perform_keyword_search(context)
        if node_type == "SlowButQualityRAG":
            return self._perform_slow_but_quality_rag(context)

        raise ValueError(f"Unknown tool node type: {node_type}")

    def _perform_slow_but_quality_rag(self, context: ExecutionContext) -> Any:
        """
        Executes the Slow But Quality Retrieval-Augmented Generation (RAG) process.

        Args:
            context (ExecutionContext): The unified context object containing node configuration and workflow state.

        Returns:
            Any: The result of the RAG operation, or an Exception object on configuration error.
        """
        config = context.config
        if "ragTarget" not in config:
            return Exception("No rag target specified in Slow But Quality RAG node")
        rag_target = config["ragTarget"]

        if "ragType" not in config:
            return Exception("No rag type specified in Slow But Quality RAG node")

        prompt = self.workflow_variable_service.apply_variables(config.get("prompt", ""), context)
        system_prompt = self.workflow_variable_service.apply_variables(config.get("systemPrompt", ""), context)
        rag_target = self.workflow_variable_service.apply_variables(rag_target, context)

        return self.slow_but_quality_rag_service.perform_rag_on_conversation_chunk(
            system_prompt, prompt, rag_target, context
        )

    def _perform_keyword_search(self, context: ExecutionContext) -> Any:
        """
        Performs a keyword search on conversation history or long-term memory.

        Args:
            context (ExecutionContext): The unified context object containing node configuration and workflow state.

        Returns:
            Any: The result of the keyword search, or an Exception object if keywords are missing.
        """
        config = context.config
        if "keywords" not in config:
            return Exception("No keywords specified in Keyword Search node")

        keywords = self.workflow_variable_service.apply_variables(config["keywords"], context)
        search_target = config.get("searchTarget", "CurrentConversation")

        return self.slow_but_quality_rag_service.perform_keyword_search(
            keywords,
            search_target,
            context
        )

    def _handle_python_module(self, context: ExecutionContext) -> Any:
        """
        Dynamically loads and executes a function from an external Python module.

        Args:
            context (ExecutionContext): The unified context object containing the module path, args, and kwargs.

        Returns:
            Any: The return value from the executed module function.

        Raises:
            ValueError: If 'module_path' is not specified in the node configuration.
        """
        config = context.config
        if "module_path" not in config:
            raise ValueError("No 'module_path' specified for PythonModule node.")
        module_path = config["module_path"]

        # Use deepcopy to prevent variable application from modifying the original message list.
        context_for_variables = deepcopy(context)
        args = list(config.get("args", ()))
        kwargs = config.get("kwargs", {})

        for i, arg in enumerate(args):
            try:
                args[i] = self.workflow_variable_service.apply_variables(str(arg), context_for_variables)
            except Exception as e:
                logger.error(f"Arg could not have variable applied. Exception: {e}")
                traceback.print_exc()
                raise

        for key, value in kwargs.items():
            kwargs[key] = self.workflow_variable_service.apply_variables(str(value), context_for_variables)

        return run_dynamic_module(module_path, *tuple(args), **kwargs)

    def _handle_offline_wiki_node(self, context: ExecutionContext) -> str:
        """
        Queries an offline Wikipedia database using a search prompt.

        Args:
            context (ExecutionContext): The unified context object containing the search prompt and node type.

        Returns:
            str: The Wikipedia article content or a message indicating no results were found.

        Raises:
            ValueError: If 'promptToSearch' is not specified in the node configuration.
        """
        config = context.config
        if "promptToSearch" not in config:
            raise ValueError("No 'promptToSearch' specified for OfflineWikiApi node.")
        prompt = config["promptToSearch"]
        node_type = config.get("type")

        # Use deepcopy here as well to ensure the context for variable application is isolated.
        variabled_prompt = self.workflow_variable_service.apply_variables(str(prompt), deepcopy(context))

        try:
            if node_type == "OfflineWikiApiBestFullArticle":
                results = self.offline_wiki_api_client.get_top_full_wiki_article_by_prompt(variabled_prompt)
            elif node_type == "OfflineWikiApiTopNFullArticles":
                results = self.offline_wiki_api_client.get_top_n_full_wiki_articles_by_prompt(
                    variabled_prompt,
                    percentile=config.get("percentile", 0.5),
                    num_results=config.get("num_results", 10),
                    top_n_articles=config.get("top_n_articles", 3)
                )
            elif node_type == "OfflineWikiApiPartialArticle":
                results = self.offline_wiki_api_client.get_wiki_summary_by_prompt(variabled_prompt)
            else:  # Fallback for "OfflineWikiApiFullArticle"
                results = self.offline_wiki_api_client.get_full_wiki_article_by_prompt(variabled_prompt)

            return results[0] if results else f"No additional information provided about '{variabled_prompt}'"

        except Exception as e:
            logger.error(f"Error accessing Wikipedia information: {e}")
            return f"I'm sorry, I couldn't find any Wikipedia information about '{variabled_prompt}'."
