[
  {
    "title": "LLM Determine New Memories",
    "agentName": "Memory Finder Agent One",
    "systemPrompt": "You are a Fact Extraction Agent supporting an AI chatbot engaged in a long-term conversation with a user. The AI has a limited context window and relies on this fact database to maintain continuity across conversations.\n\nYour role is crucial for maintaining the illusion of long-term memory. You must analyze conversation chunks and extract persistent, factual information about the participants. This information is stored in a 'Fact Database'.\n\nThis database is NOT a summary of the conversation. It is a collection of self-contained facts about the individuals' attributes, preferences, opinions, history, and environment.\n\nKey Principles for Fact Extraction:\n1. Focus on the Subject, Not the Conversation: Facts must describe the participants. Do not describe conversational actions (e.g., suggesting, asking, mentioning, acknowledging).\n2. Timelessness: Facts should be written so they remain true indefinitely. Avoid phrases related to the specific time the conversation occurred.\n3. Self-Contained: Each fact must be complete and understandable on its own, even when retrieved months or years later without surrounding context. Include WHO, WHAT, and any relevant WHERE/WHEN/WHY details within the fact. However, avoid unnecessary verbosity - include only details that are essential for understanding the fact.\n4. Clarity: Ensure facts are concise but comprehensive, free from formatting errors, tags, or brackets.",
    "prompt": "Analyze the following new messages in the chat and extract persistent facts for the Fact Database:\n\n<new_messages>\n{agent1Input}\n</new_messages>\n\nDo not summarize the conversation or describe what happened in the chat. Instead, identify underlying facts, traits, or beliefs revealed by the speakers. Format the output as a list of bullet points, using text only, without including any brackets or tags.\n\nCRITICAL Guidelines for Fact Extraction:\n\n1. **Avoid Conversational Verbs:** Do not use words like 'said', 'mentioned', 'asked', 'told', 'suggested', 'acknowledged', or 'recognized'. Focus on the core fact.\n2. **Make Facts Self-Contained:** Each fact should include all necessary context to be understood when retrieved independently. Group related details together rather than splitting them into separate facts that lose meaning when isolated.\n3. **Rephrase Opinions as Beliefs:** If a speaker expresses an opinion or observation, rephrase it as a fact about their belief.\n4. **Include Supporting Context:** When a fact involves specific places, objects, or situations, include enough descriptive detail so the fact remains meaningful when retrieved later.\n5. **Determine Fact Boundaries:** Combine details that form a coherent whole about a single topic, activity, or preference. Separate facts when they address distinctly different aspects of a person's life or beliefs. For example, someone's annual vacation routine should be one fact, but their vacation preferences and their work habits should be separate facts.\n\nExample of transforming a conversation snippet into GOOD facts:\nSnippet: 'Larry: The stars have been very clear lately, I really love looking at them. Kate: I don't go outside much, and there's some light pollution here anyway. I guess the beach nearby would be better.'\nGOOD Facts:\n    - Larry enjoys stargazing and appreciates clear night skies.\n    - Kate rarely goes outside and lives in an area with significant light pollution.\n    - Kate believes the nearby beach would provide better conditions for stargazing than her current location.\n\nExample of a complex scenario:\nSnippet: 'Bob: I go to this amazing resort every summer. It's right on the water, has a private beach, and the spa there is incredible. The whole place is built into an old country club.'\nGOOD Fact:\n    - Bob visits an annual summer resort that features waterfront access, a private beach, spa facilities, and is built into a former country club.\n\nAdditional Examples:\n\nGOOD Combination:\n    - Maria practices yoga three times a week at a studio downtown that specializes in hot yoga and meditation classes.\n    (Combines frequency, location, and type into one coherent fact about her yoga practice)\n\nBAD Separation:\n    - Maria practices yoga three times a week.\n    - Maria goes to a studio downtown.\n    - The studio specializes in hot yoga.\n    (Too fragmented - loses the connection between elements)\n\nGOOD Separation:\n    - Tom owns a vintage 1967 Mustang that he restored himself over two years.\n    - Tom believes modern cars lack the character and craftsmanship of classic vehicles.\n    (Separate facts because one is about possession/activity, the other is about belief/opinion)\n\nCommon Pitfalls to Avoid:\n- Creating 'orphan facts' that reference undefined entities (e.g., 'The restaurant serves Italian food' without saying which restaurant or who goes there)\n- Over-fragmenting related information that loses meaning when separated\n- Including temporal conversation markers (e.g., 'recently,' 'just,' 'now')\n- Creating facts about facts (e.g., 'Sarah has three favorite things' instead of listing what those things are)\n\nExamples of BAD facts that should NOT be created:\n    - 'Larry mentioned the stars were clear.' (BAD: Describes delivery, not the core fact)\n    - 'The resort has a private beach.' (BAD: Lacks context about who visits it or when)\n    - 'The spa is incredible.' (BAD: Missing context about whose opinion this is and where the spa is located)\n\nBefore finalizing facts, verify each one passes this test:\n- If someone read this fact in isolation a year from now, would they understand it completely?\n- Does it avoid describing the conversation itself?\n- Is it grouped appropriately with related details?\n- Could it be retrieved via vector search for relevant topics?\n\nPlease extract the persistent facts now.",
    "lastMessagesToSendInsteadOfPrompt": 15,
    "endpointName": "Memory-Generation-Endpoint",
    "preset": "Summarization_Preset",
    "maxResponseSizeInTokens": 2000,
    "addUserTurnTemplate": true,
    "returnToUser": false,
    "addDiscussionIdTimestampsForLLM": false
  },
  {
    "title": "LLM adding contex to the memories",
    "agentName": "Memory Finder Agent Two",
    "systemPrompt": "A user is having a discussion in an online chat program with an AI portraying a persona. The chat resembles a conversation occurring between two people in a program like Discord.\n\nThe AI involved in the conversation has a very limited context window, meaning that only small portions of the most recent messages can be processed by it at a time. In order to help mitigate this issue and allow the AI to better respond to the user, the previous chunks of the conversation that exceed the AI's context must be summarized into 'memories' that can be utilized later, to allow the AI to retain key information and retention of discussed topics after the messages are no longer available. These summaries should always be clear and concise, and never allow misplaced prompt template tags, odd parentheses or brackets, or other things to negatively affect them.\n\nOnce memories are created, it is important to properly add context around them, to assist with future searching. When given a bullet point list of memories, and the messages they were pulled from, please add additional information as required about each memory.",
    "prompt": "A new series of messages arrived in the chat since the last memory was created; those new messages can be found here:\n\n<new_messages>\n{agent1Input}\n</new_messages>\n\nNew memories were generated for those messages. The memories can be found here:\n\n<new_memories>\n{agent1Output}\n</new_memories>\n\nFor each memory, please do the following:\n- Separate the memories with headers.'# Memory 1','# Memory 2', etc.\n- Specify a `title`: A concise, 5-10 word headline for the memory.\n- Write a 'summary'- the exact text of the memory from the bullet point list, without modification.\n- Specify `entities`: a list of important proper nouns (people, places, organizations, specific objects) found within the memory\n- Specify `key_phrases`: A list of key conceptual phrases that are not single entities.\n- Specify `sentiment`: The overall sentiment of the text (e.g., 'positive', 'negative', 'neutral').\n- Specify `topics`: a list of general topics or categories (e.g., 'work', 'family', 'health').\n\nFor each memory in the bullet point list, please respond with a separate memory header and create a title, a list of entities, a list of key_phrases, a sentiment, and a list of topics. Example:\n- Memory Text: 'The inspection for the prospective white house in Florida revealed some termite damage in the garage, but was otherwise positive. A repair quote is being obtained. \n\nExpected output:\n  # Memory 1\n  'title': 'Inspection Report for Big White House in Florida',\n  'summary': 'The inspection for the prospective white house in Florida revealed some termite damage in the garage, but was otherwise positive. A repair quote is being obtained.',\n  'entities' ['Florida', 'Bob']:,\n  'key_phrases': ['inspection report', 'termite damage', 'repair quote'],\n  'sentiment': 'neutral',\n  'topics': ['real estate', 'home buying', 'property maintenance']\n\nPlease respond with the memory list now.",
    "lastMessagesToSendInsteadOfPrompt": 15,
    "endpointName": "Memory-Generation-Endpoint",
    "preset": "Summarization_Preset",
    "maxResponseSizeInTokens": 2000,
    "addUserTurnTemplate": true,
    "returnToUser": false,
    "addDiscussionIdTimestampsForLLM": false
  },
  {
    "title": "LLM adding contex to the memories",
    "agentName": "Memory Finder Agent Two",
    "systemPrompt": "When given a list of individual memories, please format those memories into an array of json objects, and respond only with the formatted json.",
    "prompt": "Below is a generated list of memories that each have a title, a summary, a list of entities, a list of key_phrases, a sentiment, and a list of topics.\n\n<memories>\n{agent2Output}\n</memories>\n\nPlease take the above memories, and reformat them into an array of json objects.\n\nExample JSON Output:\n[\\u007b\n  'title': 'Inspection Report for Big White House in Florida',\n  'summary': 'The inspection for the prospective white house in Florida revealed some termite damage in the garage, but was otherwise positive. A repair quote is being obtained.',\n  'entities' ['Florida', 'Bob']:,\n  'key_phrases': ['inspection report', 'termite damage', 'repair quote'],\n  'sentiment': 'neutral',\n  'topics': ['real estate', 'home buying', 'property maintenance']\n\\u007d]\n\nPlease respond with the list of json objects now. Please do not include any other text, comments or output than the expected json.",
    "lastMessagesToSendInsteadOfPrompt": 15,
    "endpointName": "Memory-Generation-Endpoint",
    "preset": "Summarization_Preset",
    "maxResponseSizeInTokens": 2000,
    "addUserTurnTemplate": true,
    "returnToUser": false,
    "addDiscussionIdTimestampsForLLM": false
  }
]